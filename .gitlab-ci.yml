stages:
  - prepare
  - build
  - lint
  - test
  - push
  - deploy

variables:
  CHART_NAME: frontend
  DOCKERFILE_PATH: ${CI_PROJECT_DIR}/Dockerfile
  SRC_DIR: ${CI_PROJECT_DIR}
  IMAGE_TAG: $ENV_NAME-${CI_COMMIT_SHORT_SHA}
  ARGOCD_SERVER: 'argocd.linserv.inostudio.net'
  CONTEXT_PATH: image.tar

workflow:
  rules:
    - if: '$CI_MERGE_REQUEST_IID'
      variables:
        ENV_NAME: mr
    - if: '$CI_COMMIT_BRANCH == "main"'
      variables:
        REACT_APP_DOMAIN: https://fundreport.inostudio.net
        REACT_APP_API_URL: https://fundreport.inostudio.net/api/
        REACT_APP_HUB_URL: wss://fundreport.inostudio.net/hub
        ENV_NAME: prod 
    - if: '$CI_COMMIT_BRANCH == "staging"'
      variables:
        REACT_APP_DOMAIN: https://fundreportqa.inostudio.net
        REACT_APP_API_URL: https://fundreportqa.inostudio.net/api/
        REACT_APP_HUB_URL: wss://fundreportqa.inostudio.net/hub
        ENV_NAME: stg
    - if: '$CI_COMMIT_BRANCH == "develop"'
      variables:
        REACT_APP_DOMAIN: https://fundreportdev.inostudio.net
        REACT_APP_API_URL: https://fundreportdev.inostudio.net/api/
        REACT_APP_HUB_URL: wss://fundreportdev.inostudio.net/hub
        ENV_NAME: dev
    # - if: '$CI_COMMIT_TAG' TODO: semver

default:
  before_script:
    - FILE_NAME=.env.production
    - '> $FILE_NAME'
    - echo "REACT_APP_DOMAIN=$REACT_APP_DOMAIN" >> $FILE_NAME
    - echo "REACT_APP_API_URL=$REACT_APP_API_URL" >> $FILE_NAME
    - echo "REACT_APP_BUILD_STAGE=$ENV_NAME" >> $FILE_NAME
    - echo "REACT_APP_HUB_URL=$REACT_APP_HUB_URL" >> $FILE_NAME
    - cat $FILE_NAME
  cache:
    key: node_modules
    paths:
      - node_modules/
    policy: pull
  tags:
   - kuber


nodecache:
  stage: build
  image: node:14.17.1-alpine
  script:
    - npm install
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  cache:
    key: node_modules
    paths:
      - node_modules/
    policy: push

build-image:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_USER}" "${CI_TOKEN}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --no-push
      --dockerfile "$DOCKERFILE_PATH"
      --destination "${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
      --tarPath ${CONTEXT_PATH}
  needs: []
  artifacts:
    paths:
      - ${CONTEXT_PATH}
    expire_in: 1 day


push:
  stage: push
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint:
      - ''
  script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane push ${CONTEXT_PATH} ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
  needs:
    - build-image
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "staging"'

deploy-dev:
  image: alpine/helm
  stage: deploy
  variables:
      CHART_NAME: frontend-dev
      VALUES: values.yaml
  before_script:
    - apk add --no-cache git curl bash openssh
    - apk add yq --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community
    - mkdir -m 700 -p ~/.ssh/
    - cp $RSA ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -t rsa git.inostudio.net >> ~/.ssh/known_hosts
    - git clone git@git.inostudio.net:ino/fundreport_chart.git
    - git config --global user.name "CI_SYSTEM"
    - git config --global user.email "gitlabCI@inostudio.com"
  script:
    - cd fundreport_chart
    - cd frontend
    - git checkout main
    - ls -l
    - yq eval '.image.tag = strenv(IMAGE_TAG)' --inplace $VALUES
    - helm lint -f $VALUES .
    - git add .
    - git diff-index --quiet HEAD || git commit -m "Update image tag ${CHART_NAME} to ${IMAGE_TAG}"
    - git fetch
    - git push origin main -o ci.skip
    - echo "Sync ArgoCD app"
    - curl -sSL -o /usr/local/bin/argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64
    - chmod +x /usr/local/bin/argocd
    - argocd app sync $CHART_NAME
    - argocd app wait $CHART_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  environment:
    name: "dev"

deploy-staging:
  variables:
      CHART_NAME: frontend-stg
      VALUES: values-stg.yaml
  extends: deploy-dev
  script:
    - cd fundreport_chart
    - cd frontend
    - git checkout main
    - ls -l
    - yq eval '.image.tag = strenv(IMAGE_TAG)' --inplace $VALUES
    - helm lint -f $VALUES .
    - git add .
    - git diff-index --quiet HEAD || git commit -m "Update image tag ${CHART_NAME} to ${IMAGE_TAG}"
    - git fetch
    - git push origin main -o ci.skip
    - echo "Sync ArgoCD app"
    - curl -sSL -o /usr/local/bin/argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64
    - chmod +x /usr/local/bin/argocd
    - argocd app sync $CHART_NAME
    - argocd app wait $CHART_NAME
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'
  environment:
    name: "staging"  

deploy-prod:
  variables:
      CHART_NAME: frontend-prod
      VALUES: values-prod.yaml
  extends: deploy-dev
  script:
    - cd fundreport_chart
    - cd frontend
    - git checkout main
    - ls -l
    - yq eval '.image.tag = strenv(IMAGE_TAG)' --inplace $VALUES
    - helm lint -f $VALUES .
    - git add .
    - git diff-index --quiet HEAD || git commit -m "Update image tag ${CHART_NAME} to ${IMAGE_TAG}"
    - git fetch
    - git push origin main -o ci.skip
    - echo "Sync ArgoCD app"
    - curl -sSL -o /usr/local/bin/argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64
    - chmod +x /usr/local/bin/argocd
    - argocd app sync $CHART_NAME
    - argocd app wait $CHART_NAME
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
  environment:
    name: "prod"  


sonarqube-check:
  stage: test
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"


include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

secret_detection:
  stage: test
  rules:
    - if: '$CI_MERGE_REQUEST_IID'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_BRANCH == "staging"'
  needs: []

license_scanning:
  stage: test
  rules:
    - if: '$CI_MERGE_REQUEST_IID'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "staging"'
  needs: []
